<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Samir Lamara on Samir Lamara</title>
    <link>https://slamara.github.io/</link>
    <description>Recent content in Samir Lamara on Samir Lamara</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0200</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Evolution of fine particulate matter pollution in the US</title>
      <link>https://slamara.github.io/project/airquality/</link>
      <pubDate>Wed, 08 Aug 2018 16:24:41 +0200</pubDate>
      
      <guid>https://slamara.github.io/project/airquality/</guid>
      <description>&lt;p&gt;hello!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Individual household electric power consumption</title>
      <link>https://slamara.github.io/project/electricpconsumption/</link>
      <pubDate>Wed, 08 Aug 2018 16:08:18 +0200</pubDate>
      
      <guid>https://slamara.github.io/project/electricpconsumption/</guid>
      <description>&lt;p&gt;The goal of this project is to examine how household energy usage varies over a 2-day period in February, 2007 using the base plotting system. The &lt;a href=&#34;https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip&#34;&gt;data&lt;/a&gt; used in here (in particular, the “Individual household electric power consumption Data Set”) are from the &lt;a href=&#34;http://archive.ics.uci.edu/ml/&#34;&gt;UC Irvine Machine Learning Repository&lt;/a&gt;, a popular repository for machine learning datasets.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(sqldf)
library(dplyr)
library(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Estimate the memory usage
paste0(&amp;quot;As the dataset has 2880 rows and 9 columns, it requires about &amp;quot;, 
           round(2880 * 9 * 8 / 2^20, 2), &amp;quot; Megabytes in memory.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;As the dataset has 2880 rows and 9 columns, it requires about 0.2 Megabytes in memory.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Read the data using an SQL statement
sel_data &amp;lt;- read.csv.sql(&amp;quot;./electricPConsumption/household_power_consumption.txt&amp;quot;, 
                            sep = &amp;#39;;&amp;#39;, header = TRUE, 
                            sql=&amp;quot;select * from file where Date in (&amp;#39;1/2/2007&amp;#39;, &amp;#39;2/2/2007&amp;#39;)&amp;quot;)

paste0(&amp;quot;Used memory: &amp;quot;, format(object.size(sel_data), units = &amp;quot;Mb&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Used memory: 0.3 Mb&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create a datetime column given a specific format
sel_data &amp;lt;- sel_data %&amp;gt;% mutate(datetime = as.POSIXct(paste(sel_data$Date, sel_data$Time), 
                                                          format=&amp;quot;%d/%m/%Y %H:%M:%S&amp;quot;))

# Plot the histogram
hist(sel_data$Global_active_power, col = &amp;quot;red&amp;quot;, main = &amp;quot;Global Active Power&amp;quot;, 
         xlab = &amp;quot;Global Active Power (kilowatts)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://slamara.github.io/project/electricPConsumption_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create a png file from the histogram
png(file = &amp;quot;plot1.png&amp;quot;, width = 480, height = 480, bg = &amp;quot;transparent&amp;quot;)

hist(sel_data$Global_active_power, col = &amp;quot;red&amp;quot;, main = &amp;quot;Global Active Power&amp;quot;, 
         xlab = &amp;quot;Global Active Power (kilowatts)&amp;quot;)

dev.off()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(sel_data$datetime, sel_data$Global_active_power, type = &amp;quot;l&amp;quot;, xlab = &amp;quot;&amp;quot;, 
         ylab = &amp;quot;Global Active Power (kilowatts)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://slamara.github.io/project/electricPConsumption_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow = c(2, 2))

plot(sel_data$datetime, sel_data$Global_active_power, type = &amp;quot;l&amp;quot;, xlab = &amp;quot;&amp;quot;, 
         ylab = &amp;quot;Global Active Power&amp;quot;)

plot(sel_data$datetime, sel_data$Voltage, type = &amp;quot;l&amp;quot;, xlab = &amp;quot;datetime&amp;quot;, 
         ylab = &amp;quot;Voltage&amp;quot;)

plot(sel_data$datetime, sel_data$Sub_metering_1, type = &amp;quot;l&amp;quot;, 
         ylim = range(sel_data$Sub_metering_1), xlab = &amp;quot;&amp;quot;, ylab= &amp;quot;Energy sub metering&amp;quot;)

par(new = TRUE)

plot(sel_data$datetime, sel_data$Sub_metering_2, type = &amp;quot;l&amp;quot;, 
         ylim = range(sel_data$Sub_metering_1), col = &amp;quot;red&amp;quot;, 
         xaxt = &amp;quot;n&amp;quot;, yaxt = &amp;quot;n&amp;quot;, xlab = &amp;quot;&amp;quot;, ylab= &amp;quot;&amp;quot;)

par(new = TRUE)

plot(sel_data$datetime, sel_data$Sub_metering_3, type = &amp;quot;l&amp;quot;, 
         ylim = range(sel_data$Sub_metering_1), col = &amp;quot;blue&amp;quot;, 
         xaxt = &amp;quot;n&amp;quot;, yaxt = &amp;quot;n&amp;quot;, xlab = &amp;quot;&amp;quot;, ylab= &amp;quot;&amp;quot;)

legend(&amp;quot;topright&amp;quot;,legend=c(&amp;quot;Sub_metering_1&amp;quot;, &amp;quot;Sub_metering_2&amp;quot;, &amp;quot;Sub_metering_3&amp;quot;), 
           bty = &amp;quot;n&amp;quot;, lty = c(1,1),col=c(&amp;quot;black&amp;quot;, &amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;))

plot(sel_data$datetime, sel_data$Global_reactive_power, type = &amp;quot;l&amp;quot;, 
         xlab = &amp;quot;datetime&amp;quot;, ylab = &amp;quot;Global_reactive_power&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://slamara.github.io/project/electricPConsumption_files/figure-html/unnamed-chunk-4-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting and cleaning data</title>
      <link>https://slamara.github.io/project/gcd/</link>
      <pubDate>Fri, 03 Aug 2018 18:05:56 +0200</pubDate>
      
      <guid>https://slamara.github.io/project/gcd/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The purpose of this project is to show the ability to collect, work with, and clean a data set. The goal is to prepare tidy data that can be used for later analysis.&lt;/p&gt;
&lt;p&gt;The data used in this project represent data collected from the accelerometers of Samsung Galaxy S smartphones. For a full description please visit the following website:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones&#34; class=&#34;uri&#34;&gt;http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones&lt;/a&gt; &lt;sup&gt;&lt;a href=&#34;#myfootnote1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Here are the data for the project:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip&#34;&gt;https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The script does the following:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Load the libraries &lt;em&gt;data.table&lt;/em&gt; and &lt;em&gt;dplyr&lt;/em&gt; needed to run the script&lt;/li&gt;
&lt;li&gt;Read the files &lt;em&gt;subject_test.txt&lt;/em&gt;, &lt;em&gt;y_test.txt&lt;/em&gt;, &lt;em&gt;X_test.txt&lt;/em&gt; contained in folder &lt;strong&gt;test&lt;/strong&gt; as well as the files &lt;em&gt;subject_train.txt&lt;/em&gt;, &lt;em&gt;y_train.txt&lt;/em&gt;, &lt;em&gt;X_train.txt&lt;/em&gt; in folder &lt;strong&gt;train&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Extract features and activity names to Label the data sets with descriptive variable names&lt;/li&gt;
&lt;li&gt;Merge the training and the tests sets to create one data set&lt;/li&gt;
&lt;li&gt;Coerce the column names to obtain syntactically valid ones&lt;/li&gt;
&lt;li&gt;Extract only the measurements on the mean and standard deviation for each measurement (&lt;strong&gt;sel_data&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Use descriptive activity names to name the activities in the selected data set&lt;/li&gt;
&lt;li&gt;Create a second independent tidy data set with the average of each variable for each activity and each subject (&lt;strong&gt;mean_data&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Create the output files &lt;em&gt;sel_data.csv&lt;/em&gt; and &lt;em&gt;mean_data.csv&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Re-initialize the Global Environment.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load libraries

library(data.table)
library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Read Dataset

subject_test &amp;lt;- fread(&amp;quot;./gcd/subject_test.txt&amp;quot;)
y_test &amp;lt;- fread(&amp;quot;./gcd/y_test.txt&amp;quot;)
x_test &amp;lt;- fread(&amp;quot;./gcd/X_test.txt&amp;quot;)

subject_train &amp;lt;- fread(&amp;quot;./gcd/subject_train.txt&amp;quot;)
y_train &amp;lt;- fread(&amp;quot;./gcd/y_train.txt&amp;quot;)
x_train &amp;lt;- fread(&amp;quot;./gcd/X_train.txt&amp;quot;)

# Extract features and activity names

cnames &amp;lt;- fread(&amp;quot;./gcd/features.txt&amp;quot;)

lActivities &amp;lt;- fread(&amp;quot;./gcd/activity_labels.txt&amp;quot;)

# Label the data sets with descriptive variable names

colnames(y_test) &amp;lt;- &amp;quot;activity&amp;quot;
colnames(subject_test) &amp;lt;- &amp;quot;subject&amp;quot;
colnames(x_test) &amp;lt;- as.character(cnames$V2)
all_test &amp;lt;- cbind(subject_test, y_test, x_test)

colnames(y_train) &amp;lt;- &amp;quot;activity&amp;quot;
colnames(subject_train) &amp;lt;- &amp;quot;subject&amp;quot;
colnames(x_train) &amp;lt;- as.character(cnames$V2)
all_train &amp;lt;- cbind(subject_train, y_train, x_train)


# Merge the training and the tests sets to create one data set

all_data &amp;lt;- rbind(all_test, all_train)
paste0(&amp;quot;Number of variables: &amp;quot;, dim(all_data)[2])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Number of variables: 563&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;paste0(&amp;quot;Number of Observations: &amp;quot;, dim(all_data)[1])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Number of Observations: 10299&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Coerce column names to obtain syntactically valid ones

valid_names &amp;lt;- make.names(names=names(all_data), unique=TRUE, allow_ = TRUE)
names(all_data) &amp;lt;- valid_names

# Extract only the measurements on the mean and standard deviation for each measurement

sel_data &amp;lt;- select(all_data, matches(&amp;quot;subject|activity|\\.mean\\.|\\.std\\.&amp;quot;))

names(sel_data) &amp;lt;- gsub(names(sel_data), pattern = &amp;quot;\\.\\.&amp;quot;, replacement = &amp;quot;&amp;quot;)

# Use descriptive activity names to name the activities in the selected data set

sel_data$activity &amp;lt;- lActivities$V2[match(sel_data$activity, lActivities$V1)]

paste0(&amp;quot;The recorded activities are: &amp;quot;, paste(unique(sel_data$activity), collapse = &amp;quot;, &amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;The recorded activities are: STANDING, SITTING, LAYING, WALKING, WALKING_DOWNSTAIRS, WALKING_UPSTAIRS&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write.table(sel_data, file = &amp;quot;./gcd/sel_data.txt&amp;quot;, row.names = FALSE)

# From the previous data set, create a second independent tidy data set with the average
# of each variable for each activity and each subject

mean_data &amp;lt;- sel_data %&amp;gt;% group_by(subject, activity) %&amp;gt;% summarise_all(funs(mean))

write.table(mean_data, file = &amp;quot;./gcd/mean_data.txt&amp;quot;, row.names = FALSE)

# Re-initialize the Global Environment

rm(list = ls())&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;reference&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Reference&lt;/h3&gt;
&lt;p&gt;&lt;a name=&#34;myfootnote1&#34;&gt;[1]&lt;/a&gt;: Davide Anguita, Alessandro Ghio, Luca Oneto, Xavier Parra and Jorge L. Reyes-Ortiz. Human Activity Recognition on Smartphones using a Multiclass Hardware-Friendly Support Vector Machine. International Workshop of Ambient Assisted Living (IWAAL 2012). Vitoria-Gasteiz, Spain. Dec 2012&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ranking US Hospitals</title>
      <link>https://slamara.github.io/project/rankingushospitals/</link>
      <pubDate>Fri, 03 Aug 2018 18:05:56 +0200</pubDate>
      
      <guid>https://slamara.github.io/project/rankingushospitals/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The purpose of this project is to rank over 4000 US hospitals according to the quality of care. The data represent a small subset of the data available at the Hospital Compare web site (&lt;a href=&#34;http://hospitalcompare.hhs.gov&#34; class=&#34;uri&#34;&gt;http://hospitalcompare.hhs.gov&lt;/a&gt;) run by the U.S. Department of Health and Human Services.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2FProgAssignment3-data.zip&#34;&gt;zip file&lt;/a&gt; for this project contains three files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;outcome-of-care-measures.csv&lt;/strong&gt;: Contains information about 30-day mortality and readmission rates for heart attacks, heart failure, and pneumonia for over 4,000 hospitals.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hospital-data.csv&lt;/strong&gt;: Contains information about each hospital.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hospital_Revised_Flatfiles.pdf&lt;/strong&gt;: Descriptions of the variables in each file (i.e the code book). This document contains information about many other files that are not included with this project. We want to focus on the variables for Number 19 (“Outcome of Care Measures.csv”) and Number 11 (“Hospital Data.csv”).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;finding-the-best-hospital-in-a-state&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Finding the best hospital in a state&lt;/h2&gt;
&lt;p&gt;I write a function called &lt;strong&gt;best&lt;/strong&gt; which takes two arguments: the 2-character abbreviated name of a state and an outcome name. The function returns a character vector with the name of the hospital that has the lowest 30-day mortality for the specified outcome in that state. The outcomes can be one of “heart attack”, “heart failure”, or “pneumonia”. The Hospitals that do not have data on a particular outcome are excluded from the set of hospitals when deciding the rankings.&lt;/p&gt;
&lt;p&gt;If there is a tie for the best hospital for a given outcome, then the hospital names should be sorted in alphabetical order and the first hospital in that set should be chosen.&lt;/p&gt;
&lt;p&gt;The function checks the validity of its arguments and throws an error via the stop function with the message “invalid state” or “invalid outcome” when an invalid state resp. outcome value is passed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(data.table)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;best &amp;lt;- function(state, outcome) {
## Read outcome data

    data &amp;lt;- read.csv(&amp;quot;./rankingUsHospitals/outcome-of-care-measures.csv&amp;quot;, 
                         colClasses = &amp;quot;character&amp;quot;)

## Check that state and outcome are valid

    if (!(state %in% data$State)) {
        result &amp;lt;- &amp;quot;invalid state&amp;quot;
      }
    else if (!outcome %in% c(&amp;quot;heart attack&amp;quot;, &amp;quot;heart failure&amp;quot;, &amp;quot;pneumonia&amp;quot;)) {
        result &amp;lt;- &amp;quot;invalid outcome&amp;quot;
      }
    else{
        keys &amp;lt;- c(&amp;quot;heart attack&amp;quot; = 11, &amp;quot;heart failure&amp;quot; = 17, &amp;quot;pneumonia&amp;quot; = 23)
        outcomeKey &amp;lt;- keys[outcome]
  
## Return hospital name in that state with lowest 30-day death rate
  
        dataPerState &amp;lt;- split(data, data$State)
        dataOurState &amp;lt;- dataPerState[[state]]
        dataOurState &amp;lt;- dataOurState[ order(dataOurState[&amp;quot;Hospital.Name&amp;quot;]), ]
        dataOutcome &amp;lt;- suppressWarnings(as.numeric(dataOurState[, outcomeKey]))
        good &amp;lt;- complete.cases(dataOutcome)
        dataOutcome &amp;lt;- dataOutcome[good]
        dataOurState &amp;lt;- dataOurState[good,]
        minimum &amp;lt;- min(dataOutcome)
        index &amp;lt;- match(minimum, dataOutcome)
        result &amp;lt;- dataOurState[index, 2]
    }
    result
}&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;testing-best&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Testing &lt;strong&gt;best&lt;/strong&gt;:&lt;/h3&gt;
&lt;p&gt;A set of state names and outcomes is used to check the function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;chk1 &amp;lt;- c(&amp;quot;TX&amp;quot;, &amp;quot;heart attack&amp;quot;)
chk2 &amp;lt;- c(&amp;quot;TX&amp;quot;, &amp;quot;heart failure&amp;quot;)
chk3 &amp;lt;- c(&amp;quot;MD&amp;quot;, &amp;quot;heart attack&amp;quot;)
chk4 &amp;lt;- c(&amp;quot;MD&amp;quot;, &amp;quot;pneumonia&amp;quot;)
chk5 &amp;lt;- c(&amp;quot;BB&amp;quot;, &amp;quot;heart attack&amp;quot;)
chk6 &amp;lt;- c(&amp;quot;NY&amp;quot;, &amp;quot;hert attack&amp;quot;)
dat &amp;lt;- data.table(chk1, chk2, chk3, chk4, chk5, chk6)
dat &amp;lt;- t(dat)
as.list(apply(dat, 1, function(x){do.call(best, as.list(x))}))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $chk1
## [1] &amp;quot;CYPRESS FAIRBANKS MEDICAL CENTER&amp;quot;
## 
## $chk2
## [1] &amp;quot;FORT DUNCAN MEDICAL CENTER&amp;quot;
## 
## $chk3
## [1] &amp;quot;JOHNS HOPKINS HOSPITAL, THE&amp;quot;
## 
## $chk4
## [1] &amp;quot;GREATER BALTIMORE MEDICAL CENTER&amp;quot;
## 
## $chk5
## [1] &amp;quot;invalid state&amp;quot;
## 
## $chk6
## [1] &amp;quot;invalid outcome&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;ranking-hospitals-by-outcome-in-a-state&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Ranking hospitals by outcome in a state&lt;/h2&gt;
&lt;p&gt;To this intent, I write a function &lt;strong&gt;rankHospital&lt;/strong&gt; which takes three arguments: the 2-character abbreviated name of a state (state), an outcome (outcome), and the ranking of a hospital in that state for that outcome (num).&lt;/p&gt;
&lt;p&gt;The function returns a character vector with the name of the hospital that has the ranking specified by the &lt;strong&gt;num&lt;/strong&gt; argument. The &lt;strong&gt;num&lt;/strong&gt; argument can take the values “best”, “worst”, or an integer indicating the ranking.&lt;/p&gt;
&lt;p&gt;The Hospitals that do not have data on a particular outcome are excluded from the set of hospitals when deciding the rankings. Also, If the number given by num is larger than the number of hospitals in that state, then the function returns NA.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rankHospital &amp;lt;- function(state, outcome, num = &amp;quot;best&amp;quot;) {
    
  
## Read outcome data

    data &amp;lt;- read.csv(&amp;quot;./rankingUsHospitals/outcome-of-care-measures.csv&amp;quot;, 
                         colClasses = &amp;quot;character&amp;quot;)

## Check that state and outcome are valid

    if (!(state %in% data$State)) {
        result &amp;lt;- &amp;quot;invalid state&amp;quot;
    }
    else if (!outcome %in% c(&amp;quot;heart attack&amp;quot;, &amp;quot;heart failure&amp;quot;, &amp;quot;pneumonia&amp;quot;)) {
        result &amp;lt;- &amp;quot;invalid outcome&amp;quot;
    }
    else {
        keys &amp;lt;- c(&amp;quot;heart attack&amp;quot; = 11, &amp;quot;heart failure&amp;quot; = 17, &amp;quot;pneumonia&amp;quot; = 23)
        outcomeKey &amp;lt;- keys[outcome]
  
  
## Return hospital name in that state with the given rank
## 30-day death rate
  
        dataPerState &amp;lt;- split(data, data$State)
        dataOurState &amp;lt;- dataPerState[[state]]
        dataOutcome &amp;lt;- suppressWarnings(as.numeric(dataOurState[, outcomeKey]))
        good &amp;lt;- complete.cases(dataOutcome)
        dataOutcome &amp;lt;- dataOutcome[good]
        dataOurState &amp;lt;- dataOurState[good,]
        dataOurState &amp;lt;- dataOurState[order(dataOutcome, dataOurState[&amp;quot;Hospital.Name&amp;quot;]),]
        if (grepl(&amp;quot;^[0-9]+$&amp;quot;, num)) {
            if (as.numeric(num) &amp;gt; length(dataOutcome)) {
                result &amp;lt;- NA
            }
            else {
                result &amp;lt;- dataOurState[as.numeric(num), &amp;quot;Hospital.Name&amp;quot;]
            }
        }    
        else if (num == &amp;quot;best&amp;quot;) {
                result &amp;lt;- dataOurState[1, &amp;quot;Hospital.Name&amp;quot;]
        }
        else if (num == &amp;quot;worst&amp;quot;) {
                result &amp;lt;- dataOurState[length(dataOutcome), &amp;quot;Hospital.Name&amp;quot;]
        }
        else result &amp;lt;- NA
    }
    result
}&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;testing-rankhospital&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Testing &lt;strong&gt;rankHospital&lt;/strong&gt;&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;chk1 &amp;lt;- c(&amp;quot;TX&amp;quot;, &amp;quot;heart failure&amp;quot;, 4)
chk2 &amp;lt;- c(&amp;quot;MD&amp;quot;, &amp;quot;heart attack&amp;quot;, &amp;quot;worst&amp;quot;)
chk3 &amp;lt;- c(&amp;quot;MN&amp;quot;, &amp;quot;heart attack&amp;quot;, 5000)
dat &amp;lt;- data.table(chk1, chk2, chk3)
dat &amp;lt;- t(dat)
as.list(apply(dat, 1, function(x){do.call(rankHospital, as.list(x))}))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $chk1
## [1] &amp;quot;DETAR HOSPITAL NAVARRO&amp;quot;
## 
## $chk2
## [1] &amp;quot;HARFORD MEMORIAL HOSPITAL&amp;quot;
## 
## $chk3
## [1] NA&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;ranking-hospitals-in-all-states&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Ranking hospitals in all states&lt;/h2&gt;
&lt;p&gt;I implement a function &lt;strong&gt;rankAll&lt;/strong&gt; which takes as arguments the outcome name (outcome) and hospital ranking (num) and returns a 2-column data frame containing the hospital in each state that has the ranking specified in num.&lt;/p&gt;
&lt;p&gt;The function returns a value for every state (some may be NA). The first column in the data frame contains the hospital name and the second one contains the 2-character abbreviation for the state name. Hospitals that do not have data on a particular outcome are excluded from the set of hospitals when deciding the rankings.&lt;/p&gt;
&lt;p&gt;Although it is possible to call the &lt;strong&gt;rankHospital&lt;/strong&gt; function from the previous section, I decided, for didactic purposes, not using it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rankAll &amp;lt;- function(outcome, num = &amp;quot;best&amp;quot;) {

    dataAll &amp;lt;- data.frame(hospital = character(), state = character())
  
## Read outcome data

    data &amp;lt;- read.csv(&amp;quot;./rankingUsHospitals/outcome-of-care-measures.csv&amp;quot;, 
                         colClasses = &amp;quot;character&amp;quot;)
  
## Check that outcome and num are valid

    if (!outcome %in% c(&amp;quot;heart attack&amp;quot;, &amp;quot;heart failure&amp;quot;, &amp;quot;pneumonia&amp;quot;)) {
        dataAll &amp;lt;- &amp;quot;invalid outcome&amp;quot;
    }
    else {
        keys &amp;lt;- c(&amp;quot;heart attack&amp;quot; = 11, &amp;quot;heart failure&amp;quot; = 17, &amp;quot;pneumonia&amp;quot; = 23)
        outcomeKey &amp;lt;- keys[outcome]

## For each state, find the hospital of the given rank

        dataPerState &amp;lt;- split(data, data$State)
        for (stat in names(dataPerState)) {
        dataOurState &amp;lt;- dataPerState[[stat]]
        dataOutcome &amp;lt;- suppressWarnings(as.numeric(dataOurState[, outcomeKey]))
        good &amp;lt;- complete.cases(dataOutcome)
        dataOutcome &amp;lt;- dataOutcome[good]
        dataOurState &amp;lt;- dataOurState[good,]
        dataOurState &amp;lt;- dataOurState[ order(dataOutcome, dataOurState[&amp;quot;Hospital.Name&amp;quot;]), ]
        
        if (num == &amp;quot;best&amp;quot;) {
            numState &amp;lt;- c(1)
        } else {
            if (num == &amp;quot;worst&amp;quot;) {
                numState &amp;lt;- length(dataOutcome)
            } else {
                numState &amp;lt;- num
            }
        }
    
        dataPart &amp;lt;- data.frame(hospital = dataOurState[numState, &amp;quot;Hospital.Name&amp;quot;], 
                                   state = stat, row.names = stat)
        
        dataAll &amp;lt;- rbind(dataAll, dataPart)
        }
    }

## Return a data frame with the hospital names and the (abbreviated) state name

    dataAll
}&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;testing-rankall&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Testing &lt;strong&gt;rankAll&lt;/strong&gt;&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(rankAll(&amp;quot;heart attack&amp;quot;, 20), 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                               hospital state
## AK                                &amp;lt;NA&amp;gt;    AK
## AL      D W MCMILLAN MEMORIAL HOSPITAL    AL
## AR   ARKANSAS METHODIST MEDICAL CENTER    AR
## AZ JOHN C LINCOLN DEER VALLEY HOSPITAL    AZ
## CA               SHERMAN OAKS HOSPITAL    CA
## CO            SKY RIDGE MEDICAL CENTER    CO
## CT             MIDSTATE MEDICAL CENTER    CT
## DC                                &amp;lt;NA&amp;gt;    DC
## DE                                &amp;lt;NA&amp;gt;    DE
## FL      SOUTH FLORIDA BAPTIST HOSPITAL    FL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tail(rankAll(&amp;quot;pneumonia&amp;quot;, &amp;quot;worst&amp;quot;), 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                      hospital state
## WI MAYO CLINIC HEALTH SYSTEM - NORTHLAND, INC    WI
## WV                     PLATEAU MEDICAL CENTER    WV
## WY           NORTH BIG HORN HOSPITAL DISTRICT    WY&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tail(rankAll(&amp;quot;heart failure&amp;quot;), 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                                             hospital state
## TN                         WELLMONT HAWKINS COUNTY MEMORIAL HOSPITAL    TN
## TX                                        FORT DUNCAN MEDICAL CENTER    TX
## UT VA SALT LAKE CITY HEALTHCARE - GEORGE E. WAHLEN VA MEDICAL CENTER    UT
## VA                                          SENTARA POTOMAC HOSPITAL    VA
## VI                            GOV JUAN F LUIS HOSPITAL &amp;amp; MEDICAL CTR    VI
## VT                                              SPRINGFIELD HOSPITAL    VT
## WA                                         HARBORVIEW MEDICAL CENTER    WA
## WI                                    AURORA ST LUKES MEDICAL CENTER    WI
## WV                                         FAIRMONT GENERAL HOSPITAL    WV
## WY                                        CHEYENNE VA MEDICAL CENTER    WY&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>https://slamara.github.io/privacy/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0200</pubDate>
      
      <guid>https://slamara.github.io/privacy/</guid>
      <description>&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
